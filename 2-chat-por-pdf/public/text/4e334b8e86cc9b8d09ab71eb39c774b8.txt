18/3/23, 00:11
25 Métodos de Arrays en JavaScript que todo desarrollador debe conocer. - DEV Community
√5 {JavaScript}
J5
Gastón Danielsen
Posted on 12 jun 2021 Updated on 27 oct 2021
63
15
25 Métodos de Arrays en JavaScript que todo
desarrollador debe conocer.
#javascript #programming #webdev #beginners
JavaScript nos proporciona una serie de funciones predefinidas para el manejo de
arrays.
Antes de comenzar se deben estar preguntando ¿Qué son los Arrays?, bien, se los
puede definir como un conjunto de datos ordenados por posiciones y todos asociados
en una sola variable. Los datos pueden ser de cualquier tipo de dato como, por
ejemplo, una cadena de texto, un numero o un objeto. Se podrá acceder a estos datos
de manera independiente o agrupándolos.
A continuación, se detallaran los métodos mas conocidos.
1. map(): Permite recorrer el array y modificar los elementos presentes en él,
retornando un nuevo array con la misma longitud que el original.
https://dev.to/gdcodev/25-metodos-de-arrays-en-javascript-que-todo-desarrollador-debe-conocer-4a2d
1/13
18/3/23, 00:11
25 Métodos de Arrays en JavaScript que todo desarrollador debe conocer. - DEV Community
const array = [1,2,3,4,5,6,7]
1
2
const resultArray = array.map(element ⇒ element + 10)
3 console.log(resultArray) // [11,12,13,14,15,16,17]
2. filter(): Recorre el array y retorna un nuevo array con aquellos elementos que
pasen una determinada condición.
1 const array = [1,2,3,4,5,6,7]
2 const result Array = array.filter(element element = 3 || element = 7)
3 console.log(resultArray) // [3, 7]
3. forEach(): Permite iterar el contenido de un array. Recibe un callback que toma
como parámetro el elemento actual de la iteración y el indice del mismo.
1 const array = ['banana', 'apple', 'orange', 'pear']
2
const resultArray = array.forEach((element, i) ⇒ {
3
console.log('${element} se encuentra en el indice ${i}`)
4
});
5 // banana se encuentra en el indice
6
// apple se encuentra en el indice 1
7 // orange se encuentra en el indice 2
8
// pear se encuentra en el indice 3
4. find(): Recorre el array y retorna la primera coincidencia del elemento que se
busca.
https://dev.to/gdcodev/25-metodos-de-arrays-en-javascript-que-todo-desarrollador-debe-conocer-4a2d
2/13
18/3/23, 00:11
25 Métodos de Arrays en JavaScript que todo desarrollador debe conocer. - DEV Community
123
const array = [1,2,3,4,5,6,7]
const resultArray = array.find(element ⇒ element > 3 )
3 console.log(resultArray) // [4]
5. sort() Ordena los elementos del array y retorna el arreglo ordenado. Los
elementos se ordenarán en orden ascendente (de la A a la Z) por defecto.
1
const array = [1,2,3,4,5,6,7]
2
const alphabets
=
['g', 'd', 'c', 'o', 'd', 'e', 'v']
3
4
// Ordenar en forma descendente
5 const descArray = array.sort((a,b) ⇒ a > b ? −1 : 1)
6 console.log(descArray) // [7, 6, 5, 4, 3, 2, 1]
7
8
// Ordenar en forma ascendente
9
const ascArray = alphabets.sort((a,b) ⇒ a > b ? 1 : −1)
10 console.log(ascArray) // ['c', 'd', 'd', 'e', 'g', 'v']
6. some(): Itera el array y retorna un booleano si como mínimo uno de los elementos
presentes en el array pasa una condición determinada. Recibe un callback que se
encargara de preguntar aquello que queremos dentro del array.
https://dev.to/gdcodev/25-metodos-de-arrays-en-javascript-que-todo-desarrollador-debe-conocer-4a2d
3/13
18/3/23, 00:11
25 Métodos de Arrays en JavaScript que todo desarrollador debe conocer. - DEV Community
123456789
const array = [1,2,3,4,5,6,7]
// Los elementos son mayores que 4
const isGreater Than Four = array.some (element ⇒ element > 4)
5 console.log(isGreater Than Four) // true
7 // Los elementos son menores que
const isLessThanTen = array.some (element ⇒ element < 0)
9 console.log(isLess Than Ten) // false
7. every(): Es similar al some(), ya que itera el array y retorna un booleano. Pero esta
vez, para que dicho booleano sea true todos los elementos del array deberán pasar
la condición dada.
123456789
const array = [1,2,3,4,5,6,7]
// Los elementos son mayores que 4
const isGreater Than Four = array. every (element ⇒ element > 4)
5 console.log(isGreater Than Four) // false
// Los elementos son menores que 10
const
isLessThanTen = array.every(element ⇒ element < 10)
9 console.log(isLessThanTen) // true
8. concat(): Se utiliza para unir dos o más arrays. Este método no cambia los arrays
existentes, sino que devuelve un nuevo array.
https://dev.to/gdcodev/25-metodos-de-arrays-en-javascript-que-todo-desarrollador-debe-conocer-4a2d
4/13
18/3/23, 00:11
25 Métodos de Arrays en JavaScript que todo desarrollador debe conocer. - DEV Community
1 const array1 = ['a', 'b', 'c']
2 const array2 = ['d', 'e', 'f']
3
4 const resultArray = array1.concat(array2)
5 console.log(resultArray) // ['a', 'b', 'c', 'd', 'e', 'f']
9. includes(): Determina si un array incluye un determinado elemento y retorna un
booleano según corresponda.
1 const array = [1,2,3,4,5,6,7]
2
3 console.log(array.includes(2)) // true
4 console.log(array. includes (8)) // false
10. join(): Une todos los elementos de un array en una cadena. Podemos pasarle como
parámetro el carácter de separación que debe agregar entre los elementos.
123
const array = ['g', 'd', 'c', 'o', 'd', 'e', 'v']
3 console.log(array.join('')) // gdcodev
4 console.log(array.join('-')) // g-d-c-o-d-e-v
11. reduce() : Aplica una función a un acumulador y a cada valor de una array (de
izquierda a derecha) para reducirlo a un único valor.
https://dev.to/gdcodev/25-metodos-de-arrays-en-javascript-que-todo-desarrollador-debe-conocer-4a2d
5/13
18/3/23, 00:11
25 Métodos de Arrays en JavaScript que todo desarrollador debe conocer. - DEV Community
1 const array = [1,2,3,4,5,6,7]
2
const resultArray = array.reduce((Accumulator, current) ⇒ Accumulator + current)
3
4 console.log(resultArray) // 28
12.indexOf(): Retorna el primer índice en el que se puede encontrar un elemento
dado en el array, ó retorna -1 si el elemento no esta presente.
1234
const array = ['steve', 'bruce', 'tony', 'chris']
const resultArray = array.indexOf('bruce')
4 console.log(resultArray) // 1
13. findIndex() : Retorna el índice del primer elemento de un array que cumpla con la
función de prueba proporcionada. En caso contrario devuelve -1.
1234
const array = ['steve', 'bruce', 'tony', 'chris']
const resultArray = array. findIndex(element element = 'bruce')
4 console.log(resultArray) // 1
14. fill() : Cambia todos los elementos de un array por un valor estático, desde el índice
de inicio hasta el índice final. Retorna el array modificado.
https://dev.to/gdcodev/25-metodos-de-arrays-en-javascript-que-todo-desarrollador-debe-conocer-4a2d
6/13
18/3/23, 00:11
25 Métodos de Arrays en JavaScript que todo desarrollador debe conocer. - DEV Community
12345679
8
const array = [1,2,3,4,5,6,7]
3 // llenar con 10 desde la posición 3
4 console.log(array.fill(10, 3)) // [1, 2, 3, 10, 10, 10, 10]
// llenar con 8 desde la posición 4 hasta la posición 6
7 console.log(array.fill(8, 4, 6)) // [1, 2, 3, 10, 8, 8, 10]
15. push() Añade uno o más elementos al final de un array y devuelve la nueva
longitud del array.
1 const array = ['apple', 'orange', 'pear']
2
3 console.log(array.push('banana')) // 4
4 console.log(array) // ['apple', 'orange', 'pear', 'banana']
16. pop(): Elimina el último elemento de un array y lo devuelve. Este método cambia la
longitud del array.
1 const array = ['apple', 'orange', 'pear']
2 array.pop()
3
4 console.log(array) // ['apple', 'orange']
https://dev.to/gdcodev/25-metodos-de-arrays-en-javascript-que-todo-desarrollador-debe-conocer-4a2d
7/13
18/3/23, 00:11
25 Métodos de Arrays en JavaScript que todo desarrollador debe conocer. - DEV Community
17. shift(): Elimina el primer elemento del array y lo retorna. Este método modifica la
longitud del array.
1 const array =
['apple', 'orange', 'pear']
2 array.shift()
3
4 console.log(array) // ['orange', 'pear']
18. unshift() : Agrega uno o más elementos al inicio del array, y devuelve la nueva
longitud del array.
1 const array = ['apple', 'orange', 'pear']
2
3 console.log(array.unshift('banana')) // 4
4 console.log(array) // ['banana', 'apple', 'orange', 'pear']
19. slice() : Devuelve una copia de una parte del array dentro de un nuevo array
empezando por inicio hasta fin (fin no incluido). El array original no se modificará.
https://dev.to/gdcodev/25-metodos-de-arrays-en-javascript-que-todo-desarrollador-debe-conocer-4a2d
8/13
18/3/23, 00:11
25 Métodos de Arrays en JavaScript que todo desarrollador debe conocer. - DEV Community
1 const array = ['a', 'b', 'c', 'd', 'e', 'f']
2 const result Array = array.slice(2,4)
3
4 console.log(resultArray) // ['c', 'd']
20. reverse(): Invierte el orden de los elementos de un array. El primer elemento pasa a
ser el último y el último pasa a ser el primero.
1
const array = [1,2,3,4,5,6,7]
2
3 console.log(array.reverse()) // [7, 6, 5, 4, 3, 2, 1]
21. splice(): Cambia el contenido de un array eliminando elementos existentes y/o
agregando nuevos elementos.
123
2
const array = ['apple', 'orange', 'pear']
3 array.splice(1, 0, 'banana')
4 console.log(array) // ['apple', 'banana', 'orange', 'pear']
22. lastIndexOf() : Busca un elemento en un array y devuelve su posición. Comienza
buscando por el final del array. Retorna -1 si el elemento no se encontrara.
https://dev.to/gdcodev/25-metodos-de-arrays-en-javascript-que-todo-desarrollador-debe-conocer-4a2d
9/13
18/3/23, 00:11
25 Métodos de Arrays en JavaScript que todo desarrollador debe conocer. - DEV Community
1 const array = ['apple', 'orange', 'pear', 'apple']
2
3 console.log(array.lastIndexOf('apple')) // 3
23. flat() : Crea una nuevo array con todos los elementos de sub-array concatenados
recursivamente hasta la profundidad especificada.
1 const array = [1,2,3,4,5,[6,7]]
2
3 console.log(array.flat()) // [1,2,3,4,5,6,7]
24. isArray(): Determina si el valor pasado es un Array.
1
console.log(Array.isArray([1,2,3,4,5,6,7])); // True
2 console.log(Array.isArray({nombre: 'gdcodev'})) // False
3 console.log(Array.isArray('apple')) // False
4 console.log(Array.isArray(undefined)) // False
25. from() : Crea una nueva instancia de Array a partir de un objeto iterable.
https://dev.to/gdcodev/25-metodos-de-arrays-en-javascript-que-todo-desarrollador-debe-conocer-4a2d
10/13
18/3/23, 00:11
25 Métodos de Arrays en JavaScript que todo desarrollador debe conocer. - DEV Community
1 console.log(Array. from ('gdcodev')) // ['g', 'd', 'c', 'o', 'd', 'e', 'v']
Repositorio de Git: https://github.com/gdcodev/25-metodos-array-javascript
Mis Redes:
Facebook | LinkedIn |
Github
Top comments (6)
Josué Oroya
12 jun 21
muy buen aporte
Alexcode
.
31 dic 21
Buenisimo!
Mambraka 12 dic 21.
Excelente contenido brot
Tkmanga
•
18 jun 21
buen aporte, gracias!
Francisco Zapata 30 ago 21
Excelente!!! Gracias Gastón
Emilianott 26 ago 22
Muchisimas gracias
https://dev.to/gdcodev/25-metodos-de-arrays-en-javascript-que-todo-desarrollador-debe-conocer-4a2d
:
11/13